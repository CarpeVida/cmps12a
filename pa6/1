//-----------------------------------------------------------------------------
//   Complex.java
//   Represents complex numbers as a pair of doubles
//   DANIEL SCHMELTER
//   pa6
//   dschmelt
//   12-1-15
//
//-----------------------------------------------------------------------------

class Complex{

   private double re;
   private double im;
   
   public static final Complex ONE = Complex.valueOf(1,0);
   public static final Complex ZERO = Complex.valueOf(0,0);
   public static final Complex I = Complex.valueOf(0,1);

   Complex(double a, double b){
      this.re = a;
      this.im = b;
   }

   Complex(double a){
      this.re = a;
      this.im = 0;
   }

   Complex(String s){
      double[] blah = parseComplex(s);
      this.re = blah[0];
      this.im = blah[1];
   }
   // copy()
   // Return a new Complex equal to this Complex
   Complex copy(){
      double real = this.re;
      double imag = this.im;
      return new Complex(real, imag);
   }
   // add()
   // Return a new Complex representing the sum this plus z.
   Complex add(Complex z){
      double real = (this.re + z.re);
      double imag = (this.im + z.im);
      return new Complex(real, imag);
   }

   // negate()
   // Return a new Complex representing the negative of this.
   Complex negate(){
      double real = (0 - this.re);
      double imag = (0 - this.im);
      return new Complex(real, imag);
   }

   // sub()
   // Return a new Complex representing the difference this minus z.
   Complex sub(Complex z){
      double real = this.re - z.re;
      double imag = this.im - z.im;
      return new Complex(real, imag); 
   }

   // mult()
   // Return a new Complex representing the product this times z.
   Complex mult(Complex z){
      double real = ((this.re * z.re) - (this.im * z.im));
      double imag = ((this.re * z.im) + (this.im * z.re));
      return new Complex(real,imag);
   }

   // recip()
   // Return a new Complex representing the reciprocal of this.
   // Throw an ArithmeticException with appropriate message if 
   // this.equals(Complex.ZERO).
   Complex recip(){
      if(this.equals(Complex.ZERO)){
         throw new ArithmeticException("Cannot divide by 0");
      }
      double real = (this.re/(Math.pow(this.re, 2) + Math.pow(this.im, 2)));
      double imag = ((0 - this.re)/(Math.pow(this.re, 2)+Math.pow(this.im, 2)));
      return new Complex(real, imag); 
   }

   // div()
   // Return a new Complex representing the quotient of this by z.
   // Throw an ArithmeticException with appropriate message if 
   // z.equals(Complex.ZERO).
   Complex div(Complex z){
     if(z.equals(Complex.ZERO)){
     //  throw new ArithmeticException("Duuude");  
     }
     double denom = z.re*z.re + z.im*z.im ; 
     return new Complex(((this.re * z.re + this.im * z.im)/denom) ,
        (this.im * z.re - this.re* z.im) / denom);
   }
    
   // conj()
   // Return a new Complex representing the conjugate of this Complex.
   Complex conj(){
      double real = this.re;
      double imag = 0-this.im;
      return new Complex(real, imag);
   }
   
   // Re()
   // Return the real part of this.
   double Re(){
      return this.re;
   }

   // Im()
   // Return the imaginary part of this.
   double Im(){
      return this.im;  
   }

   // abs()
   // Return the modulus of this Complex, i.e. the distance between 
   // points (0, 0) and (re, im).
   double abs(){
      double modulus = Math.pow(this.re, 2) + Math.pow(this.im, 2);
      modulus = Math.sqrt(modulus);
      return modulus;
   }

   // arg()
   // Return the argument of this Complex, i.e. the angle this Complex
   // makes with positive real axis.
   double arg(){
      return Math.atan2(im, re);
   }

   // Other functions ---------------------------------------------------------
   
   // toString()
   // Return a String representation of this Complex.
   // The String returned will be readable by the constructor Complex(String s)
   public String toString(){
      String str = "error";
      if( this.im != 0 && this.re != 0){
         str = String.valueOf(re) + "+" + String.valueOf(im)+"i";
      } else if(this.im == 0){
         str = String.valueOf(re);
      }else if(this.re == 0){
         str = String.valueOf(im)+"i";
      }
      return str;
   }

   // equals()
   // Return true iff this and obj have the same real and imaginary parts.
   public boolean equals(Object obj){
      boolean eq = false;
      Complex c = (Complex) obj;
      if( this.re == c.re && this.im == c.im){
         eq = true;
      }
      return eq;
   }

   // valueOf()
   // Return a new Complex with real part a and imaginary part b.
   static Complex valueOf(double a, double b){
     return new Complex(a, b); 
   }

   // valueOf()
   // Return a new Complex with real part a and imaginary part 0.
   static Complex valueOf(double a){
      return new Complex(a);
   }

   // valueOf()
   // Return a new Complex constructed from s.
   static Complex valueOf(String s){
     return( new Complex(s));
   }

 private static double[] parseComplex(String str){
      double[] part = new double[2];
      String s = str.trim();
      String NUM = "(\\d+\\.\\d*|\\.?\\d+)";
      String SGN = "[+-]?";
      String OP =  "\\s*[+-]\\s*";
      String I =   "i";
      String OR =  "|";
      String REAL = SGN + NUM;
      String IMAG = SGN + NUM + "?" + I;
      String COMP = REAL + OR +
                    IMAG + OR +
                    REAL + OP + NUM + "?" + I;
      
      if(!s.matches(COMP)){
         throw new NumberFormatException(
                   "Cannot parse input string \"" + s + "\" as Complex");
      }
      s = s.replaceAll("\\s","");     
      if(s.matches(REAL)){
         part[0] = Double.parseDouble(s);
         part[1] = 0;
      }else if(s.matches(SGN + I)){
         part[0] = 0;
         part[1] = Double.parseDouble(s.replace(I, "1.0"));
      }else if( s.matches(IMAG)){
         part[0] = 0;
         part[1] = Double.parseDouble(s.replace(I , ""));
      }else if(s.matches(REAL + OP + I)){
         part[0] = Double.parseDouble( s.replaceAll( "("+REAL+")" + OP + ".+","$1"));
         part[1] = Double.parseDouble( s.replaceAll(".+(" + OP + ")" + I,"$1"+"1.0"));
      }else{   //  s.matches(REAL+OP+NUM+I) 
         part[0] = Double.parseDouble(s.replaceAll("(" + REAL + ").+","$1" ));
         part[1] = Double.parseDouble(s.replaceAll( ".+(" + OP + NUM+")" + I, "$1" ));
      }
      System.out.print("   " + part[0] + ", " + part[1]);
      return part;
   }
}
